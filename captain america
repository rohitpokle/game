import turtle
import math

t = turtle.Turtle()


def ankur(x, y):
    t.penup()
    t.goto(x, y)
    t.pendown()
    t.setheading(0)
    t.pensize(2)
    t.speed(10)


def golo(r, color):
    x_point = 0
    y_pont = -r
    ankur(x_point, y_pont)
    t.pencolor(color)
    t.fillcolor(color)
    t.begin_fill()
    t.circle(r)
    t.end_fill()


def paanch(r, color):
    ankur(0, 0)
    t.pencolor(color)
    t.setheading(162)
    t.forward(r)
    t.setheading(0)
    t.fillcolor(color)
    t.begin_fill()
    for i in range(5):
        t.forward(math.cos(math.radians(18)) * 2 * r)  # 2cos18Â°*r
        t.right(144)
    t.end_fill()
    t.hideturtle()


if __name__ == '__main__':
    golo(288, 'crimson')
    golo(234, 'snow')
    golo(174, 'crimson')
    golo(114, 'blue')
    paanch(114, 'snow')
    turtle.done()
# from tkinter import *
# import self
# import Application
# import master


# class Application (Frame): 
#     super(Application, self)._init_(master)
#     def __init__(self):
#     self.task=""
#     self.userIn+StringVar()
#     self.Grid()
#     self.create_widgetds

# def create_widgets(self):
#     self.user_input = Entry(set, bg = "#5BC8AC" , bd = 29, insertwidth =4 ,width= 24 
#     , font = ("Verdaana" , 20 , "bold"), textvariable=self.userIn, justify=RIGHT)
#     self.user_input.insert(0,"0")

#     self.button1=Button(self,bg="#98DBC6",bd=12,
#     text="7",padx=33,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button.grid(row=2,column=0,sticky=W)

#     self.button2=Button(self,bg="#98DBC6",bd=12,
#     text="8",padx=35,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button2.grid(row=2,column=0,sticky=W)

#     self.button3=Button(self,bg="#98DBC6",bd=12,
#     text="9",padx=33,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button3.grid(row=2,column=0,sticky=W)
    

#     self.button4=Button(self,bg="#98DBC6",bd=12,
#     text="4",padx=33,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button4.grid(row=2,column=0,sticky=W)
    
#     self.button5=Button(self,bg="#98DBC6",bd=12,
#     text="5",padx=33,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button5.grid(row=2,column=0,sticky=W)

#     self.button6=Button(self,bg="#98DBC6",bd=12,
#     text="6",padx=33,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button6.grid(row=2,column=0,sticky=W)

#     self.button7=Button(self,bg="#98DBC6",bd=12,
#     text="1",padx=33,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button7.grid(row=2,column=0,sticky=W)

#     self.button8=Button(self,bg="#98DBC6",bd=12,
#     text="2",padx=33,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.button8.grid(row=2,column=0,sticky=W)
    
#     self.Addbutton=Button(self,bg="#98DBC6",bd=12,
#     text="+",padx=36,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.Addbutton.grid(row=2,column=0,sticky=W)
     
#     self.Subbutton=Button(self,bg="#98DBC6",bd=12,
#     text="-",padx=39,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.Subbutton.grid(row=2,column=0,sticky=W)
    
#     self.Multbutton=Button(self,bg="#98DBC6",bd=12,
#     text="*",padx=38,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.Multbutton.grid(row=2,column=0,sticky=W)
    
#     self.Divbutton=Button(self,bg="#98DBC6",bd=12,
#     text="/",padx=39,pady=25, 
#     font= ("Helvetica",20,"bold"),command=lambda:self.buttonclick(7))
#     self.Divbutto.grid(row=2,column=0,sticky=W)
    
#     self.Equalbutton=Button(self,bg="#E6D72A",bd=12,
#     text="=",padx=100,pady=25, 
#     font= ("Helvetica",20,"bold"),
#     command=lambda:self.buttonclick(7))
#     self.Equalbutton.grid(row=2,column=0,sticky=W, columnspan=2)
    
#     self.clearbutton=Button(self,bg="#E6D72A",bd=12,
#     text="AC",padx=7,width=28, 
#     font= ("Helvetica",20,"bold"),command=self.clearDisplay)
#     self.clearbutton.grid(row=2,column=0,sticky=W)

# def buttonClick(self,number):
#     self.task=str(self.task)+str(number)
#     self.useerIn.set(self.task)

# def CalculateTask(self):
#     self.data=self.user_input.get()
#     try:
#         self.answer=eval(self.data)
#         self.displayText(self.answer)
#         self.task+self.answer

#     except SyntaxError as e:
#         self.displayText("Invalid Syntax!")
#         self.task=""

# def displayText(self,value):
#     self.user_input.delet(0,END)
#     self.user_input.insert(0,"0")

# calculator = Tk()
# calculator.title("calculator")
# app=Application(calculator)
# calculator.resizeable(width=False, height=False)
# calculator.mainloop()
